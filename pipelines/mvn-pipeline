def dumpParams(String outputFile) {
  echo "Dumping all parameters to " + outputFile
  def lines = ""
  params.each() { param, value ->
    lines = lines + "${param}=\"${value}\"\n"
  }
  writeFile file: outputFile, text: lines
}

pipeline {
    agent any

    options {
       buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '2'))
     }

    stages {
        stage('Prep') {
            steps {
                //cleanWs()
                script {
                  if ( env.HERA_GIT_BRANCH == null || "".equals("${env.HERA_GIT_BRANCH}") ) {
                     env.HERA_GIT_BRANCH = "master"
                  }
                  else
                    echo "HERA_GIT_BRANCH:[${env.HERA_GIT_BRANCH}]"
                }
                dir('hera') {
                  git url: 'https://github.com/jboss-set/hera.git',
                      poll: false,
                      branch: "${env.HERA_GIT_BRANCH}",
                      changelog: false
                }

                timeout(time: 10) {
                    script {
                        sh label: '', script: "echo WORKSPACE: ${env.WORKSPACE}/"
                        //sh label: '', script: "PWD: ${env.PWD}"
                        sh label: '', script: "ls ${env.WORKSPACE}/hera/"

                        // warning, GIT_BRANCH var alreads points to pipeline's branch
                        if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                          env.GIT_REPOSITORY_BRANCH = "master"
                        }
                        echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                        dumpParams("${env.WORKSPACE}/job_params.txt")

                        // Start container
                        env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/mvn-wrapper.sh"
                        git url: "${env.GIT_REPOSITORY_URL}",
                            branch: "${env.GIT_REPOSITORY_BRANCH}"
                        sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
                    }
                }
            }
        }
      stage ('Build') {
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job ${env.WORKSPACE}/job_params.txt"
                archiveArtifacts artifacts: '**/*', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
                  return err
              }
            }
        }
        failure {
            mail to: 'jboss-set-ops@redhat.com', from: 'rpelisse@redhat.com',
                subject: "Build: ${env.JOB_NAME} - Failed",
                body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
