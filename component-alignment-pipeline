pipeline {
    agent any

   options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
     }

    parameters {
       string(name: 'TO_ADDRESS', defaultValue: 'rpelisse@redhat.com', description: '')
       string(name: 'RULE_NAME', defaultValue: 'eap73', description: '')
       string(name: 'TARGET_DIR', defaultValue: 'jbosseap7', description: '')
       string(name: 'REPORT_TITLE', defaultValue: 'JBoss EAP 7.3.x', description: '')
       string(name: 'LOGGER_PROJECT_CODE', defaultValue: 'eap7.3.x', description: '')
       string(name: 'GIT_REPOSITORY_BRANCH', defaultValue: '7.3.x', description: '')
    }

    environment {
        HERA_USERNAME = 'jenkins'
        HERA_HOSTNAME = 'thunder.next'
    }

    stages {
        stage('Prep') {
            steps {
                //cleanWs()
                script {
                    // warning, GIT_BRANCH var alreads points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "master"
                    }
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                }
                dir('workdir') {
                  git url: "${env.GIT_REPOSITORY_URL}",
                      branch: "${env.GIT_REPOSITORY_BRANCH}"
                }
                dir('hera') {
                  git 'https://github.com/jboss-set/hera.git'
                }

                dir('harmonia') {
                  git branch: 'mvn_debug', url: 'https://github.com/rpelisse/harmonia.git'
                }

                script {
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/harmonia-wrapper.sh"
                }
                // Start container
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
            }
        }
        stage ('Build') {
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
        }
    }
}
