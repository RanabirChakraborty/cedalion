pipeline {
    agent any

    options {
       buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '2'))
     }

    parameters {
       string(name: 'JAVA_HOME', defaultValue: '/opt/oracle/java/', description: 'Java home')
       string(name: 'MAVEN_HOME', defaultValue: '/opt/tools/apache-maven-3.6.3', description: 'Maven home')
       string(name: 'CRON_PATTERN', defaultValue: 'H/5 * * * *', description: 'cron pattern to trigger the job')
       string(name: 'POLL_PATTERN', defaultValue: 'H/5 * * * *', description: 'cron pattern to poll the SCM')
    }

    stages {
        stage('Prep') {
            steps {
                //cleanWs()
                dir('hera') {
                  git 'https://github.com/jboss-set/hera.git'
                }

                timeout(time: 10) {
                    script {
                        // warning, GIT_BRANCH var alreads points to pipeline's branch
                        if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                          env.GIT_REPOSITORY_BRANCH = "master"
                        }
                        echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"

                        // Start container
                        env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/mvn-wrapper.sh"
                        git url: "${env.GIT_REPOSITORY_URL}",
                            branch: "${env.GIT_REPOSITORY_BRANCH}"
                        sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
                    }
                }
            }
        }
      stage ('Build') {
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                archiveArtifacts artifacts: '**/*', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
                  return err
              }
            }
        }
    }
}
