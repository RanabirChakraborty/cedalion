def lookupLastSuccessfulBuildId(String parent_jobname) {
  echo "Fetching last successful build ID of parent job:" + parent_jobname
  def lastSuccessfulBuildId = sh(script:"/var/jenkins_home/fetchLastSuccessfulBuildId.sh ${parent_jobname}", returnStdout: true)
  echo "PARENT JOB LAST SUCCESSFUL BUILD ID: " + lastSuccessfulBuildId
  if ( "${lastSuccessfulBuildId}".equals("0") ) {
    error("Build failed because parent job has never run.")
  }
  return lastSuccessfulBuildId.trim()
}

def dumpParameters(String outputFile) {
  echo "Dumping all parameters into a file for loading in cry.sh"
  def lines = ""
  params.each() { param, value ->
    def line = "export ${param}=\"${value}\"\n"
    println line
    lines = lines + line
  }
  writeFile file: outputFile, text: lines
  echo "Done.."
}

pipeline {
    agent any

    options {
      buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
    }

    stages {
        stage('Prep') {
            steps {
                cleanWs()
                script {
                    // warning, GIT_BRANCH var alreads points to pipeline's branch
                    if ( env.GIT_REPOSITORY_BRANCH == null || "".equals("${env.GIT_REPOSITORY_BRANCH}") ) {
                      env.GIT_REPOSITORY_BRANCH = "master"
                    }
                    echo "GIT_REPOSITORY_BRANCH:[${env.GIT_REPOSITORY_BRANCH}]"
                }
                dir('workdir') {
                  git url: "${env.GIT_REPOSITORY_URL}",
                      branch: "${env.GIT_REPOSITORY_BRANCH}"
                }
                dir('hera') {
                  git branch: 'set-358_mount_ssh', url: 'https://github.com/gaol/hera.git'
                }
                dir('auxilia') {
                  git 'https://github.com/jboss-set/auxilia.git'
                }
                dir('harmonia') {
                  git branch: 'cryo', url: 'https://github.com/gaol/harmonia.git'
                }

                script {
                    env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/build-wrapper.sh"
                    env.HARMONIA_SCRIPT = "cryo.sh"
                    def lastSuccessfulBuildId = lookupLastSuccessfulBuildId("ci-cryo")
                    assert lastSuccessfulBuildId.isNumber()
                    env.PARENT_JOB_VOLUME = "/home/jenkins/jobs/ci-cryo/builds/${lastSuccessfulBuildId}/archive"
                    echo "Parent job workspace volume: ${env.PARENT_JOB_VOLUME}"
                    dumpParameters("${env.WORKSPACE}/cryo-params.sh")
                }
                // Start container
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
            }
        }
        stage ('Build') {
            steps {
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                archiveArtifacts artifacts: 'workdir/*.tar.gz', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                findText(textFinders: [
                    textFinder(regexp: ".*CRYO.*SUCCESS.*(Dry run complete|Push future).*", alsoCheckConsoleOutput: true, buildResult: 'SUCCESS', changeCondition: 'MATCH_FOUND')
                ])
            }
        }
    }
    post {
        always {
            script {
             try {
                  sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
              } catch (err) {
                  echo "Error while deleting container: ${err}"
              }
            }
        }
        failure {
            mail to: 'lgao@redhat.com', from: 'lgao@redhat.com',
                subject: "Build: ${env.JOB_NAME} - Failed",
                body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}\n\nBlue Ocean:\n${env.RUN_DISPLAY_URL}"
        }
    }
}
