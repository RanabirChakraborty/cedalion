pipeline {
    agent any
    triggers { cron("@hourly") }

    options {
      buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }

    stages {
        stage('Prep') {
            steps {
                cleanWs()
            }
        }
        stage ('Build') {
            steps {

                dir('hera') {
                  git 'https://github.com/jboss-set/hera.git'
                }

              script {
                echo "WORKSPACE: ${env.WORKSPACE}"
                sh label: 'lsWorspace', script: "ls ${env.WORKSPACE}/hera/"
                env.BUILD_SCRIPT = "${env.WORKSPACE}/hera/mvn-wrapper.sh"
                dir('workdir') {
                  git url: "${env.GIT_REPOSITORY_URL}",
                      branch: "${env.GIT_REPOSITORY_BRANCH}"
                }
                sh label: 'lsWorspace', script: "ls -l ${env.WORKSPACE}/hera/"
                sh label: 'lsWorspace', script: "chmod +x ${env.WORKSPACE}/hera/*.sh"
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh run"
                sh label: '', script: "${env.WORKSPACE}/hera/hera.sh job"
                publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '.', reportFiles: 'bugclerk-report.html', reportName: 'HTML Report', reportTitles: ''])
                archiveArtifacts artifacts: '**/*', fingerprint: true, followSymlinks: false, onlyIfSuccessful: true
                }
            }
        }
    }
    post {
        always {
            script {
                try {
                    sh label: '', script: "${env.WORKSPACE}/hera/hera.sh stop"
                } catch (err) {
                    echo "Error while deleting container: ${err}"
                }
            }
        }
    }
}
